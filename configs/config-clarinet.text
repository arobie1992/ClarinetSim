# network size
SIZE 10

# parameters of periodic execution
CYCLES 100
CYCLE SIZE*10

# parameters of message transfer
# delay values here are relative to cycle length, in percentage,
# eg 50 means half the cycle length, 200 twice the cycle length, etc.
MINDELAY 0
MAXDELAY 0
# drop is a probability, 0<=DROP<=1
DROP 0

random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE

################### protocols ===========================

protocol.link peersim.core.IdleProtocol

protocol.clarinet clarinetsim.ClarinetNode
protocol.clarinet.linkable link
protocol.clarinet.step CYCLE
protocol.clarinet.transport tr
protocol.clarinet.max_connections 15
protocol.clarinet.reputation.min_trusted 50
protocol.clarinet.reputation.type PROPORTIONAL
protocol.clarinet.reputation.subtractive.initial 100
protocol.clarinet.reputation.proportional.eval_threshold 50
protocol.clarinet.weak_penalty_value 1
protocol.clarinet.strong_penalty_value 3
protocol.clarinet.strong_penalty_type multiplicative
protocol.clarinet.print_interval 3
protocol.clarinet.print_connections false
protocol.clarinet.print_log false
protocol.clarinet.print_reputations false
protocol.clarinet.num_malicious 50
protocol.clarinet.malicious_action_threshold CYCLES/2
protocol.clarinet.metrics.print_individual false

protocol.urt UniformRandomTransport
protocol.urt.mindelay (CYCLE*MINDELAY)/100
protocol.urt.maxdelay (CYCLE*MAXDELAY)/100

protocol.tr UnreliableTransport
protocol.tr.transport urt
protocol.tr.drop DROP

################### initialization ======================

init.rndlink WireKOut
init.rndlink.k 20
init.rndlink.protocol link

init.vals LinearDistribution
init.vals.protocol clarinet
init.vals.max SIZE
init.vals.min 1

init.sch CDScheduler
init.sch.protocol clarinet
init.sch.randstart

################ control ==============================

control.0 SingleValueObserver
control.0.protocol clarinet
control.0.step CYCLE

